name: create release
'on':
  push:
    paths-ignore: '**/README.md'
jobs:
  release-project:
    name: Release different versions of Text file
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: 'python -m pip install --upgrade pip
        pip install regex PyYAML python-csv requests 
        '
    - name: Create zip file for plain and pages
      run: |
          import re
          import requests
          import json
          import yaml
          import logging
          import csv

          logging.basicConfig(
              filename="catalog_info.log",
              format="%(levelname)s: %(message)s",
              level=logging.INFO
          )

          def notifier(msg):
              logging.info(msg)

          def get_title_and_work_id(g, pecha_id):
              try:
                  repo = g.get_repo(f"Openpecha/{pecha_id}")
                  contents = repo.get_contents(f"{pecha_id}.opf/meta.yml")
                  meta_content = contents.decoded_content.decode()
                  metadata = yaml.safe_load(meta_content)
                  work_id = metadata['source_metadata']['id'][4:]
                  title = metadata['source_metadata']['title']
              except:
                  work_id = None
                  title = None
              return title, work_id

          def update_catalog(pecha_ids):
              for pecha_id in pecha_ids:
                  if pecha_id == "P000001":
                      continue
                  elif pecha_id == "P000002":
                      continue
                  title, work_id = get_title_and_work_id(g, pecha_id)
                  if title == None:
                      if work_id == None:
                          row_string = f"[{pecha_id}](https://github.com/OpenPecha/{pecha_id}),,,,\n"
                      else:
                          row_string = f"[{pecha_id}](https://github.com/OpenPecha/{pecha_id}),,,,bdr:{work_id}\n"
                  else:
                      row_string = f"[{pecha_id}](https://github.com/OpenPecha/{pecha_id}),{title},,,bdr:{work_id}\n"
                  print(row_string)
                  with open("catalog.csv", "a", encoding='utf-8') as csvfile:
                      csvfile.write(row_string)

          def check_catalog_for_pecha(pecha_id):
              num = 0
              with open("catalog.csv", newline="") as file:
                  pechas = list(csv.reader(file, delimiter=","))
                  for pecha in pechas[3:]:
                      res = not bool(pecha)
                      if res == False:
                          pecha_id_csv = re.search("\[.+\]", pecha[0])[0][1:-1]
                          if pecha_id == pecha_id_csv:
                              num += 1
                              print(f"{pecha_id} is available")
                              break
                  if num == 0:
                      notifier(f"{pecha_id} is not in catalog")
                      print(f"{pecha_id} is not in catalog")
                      return pecha_id
              return None

          def check_repo(g, filename):
              add_to_catalog = []
              with open(filename, "r") as openfile:
                  repo_object = json.load(openfile)
              for num in repo_object:
                  pecha_id = repo_object[num]['repo']
                  pecha_ids = check_catalog_for_pecha(pecha_id)
                  if pecha_ids != None:
                      add_to_catalog.append(pecha_ids)
              return add_to_catalog

          def clean_catalog(g, string):
              pecha = re.search(r"\((.*?)\)", string)
              pechaurl = pecha.group(1)
              pecha_id = pechaurl[29:]
              try:
                  repo = g.get_repo(f"ta4tsering/{pecha_id}")
                  return None
              except:
                  print(f"this pecha {pecha_id} has no repository")
                  notifier(f"this pecha {pecha_id} has no repository")
                  return pecha_id
                  
          def get_lines(g,catalog):
              lines = []
              strings = re.split(r"[\r\n]",catalog)
              for num, string in enumerate(strings, 0):
                  if num == 0:
                      lines.append(string)
                  elif num%2 == 0:
                      if len(string) != 0:
                          change = clean_catalog(g, string)
                          if change == None:
                              lines.append(string)
              return lines

          def get_catalog(cataglog_path):
              repo = g.get_repo(f"ta4tsering/catalog")
              content = repo.get_contents(f"data/catalog.csv")
              catalog = content.decoded_content.decode()
              lines = get_lines(g,catalog)
              with open("catalog.csv", "w", encoding='utf-8') as f:
                  for line in lines:
                      f.write(line)
                      f.write(f"\n")

          def write_repo_info(repo_info, filename):
              with open(filename, "w") as outfile:
                  outfile.write(repo_info)

          def get_repo_names(headers):
              repo_info = {}
              curr_name = {}
              new_name = 30000
              nums = 1
              response = requests.get(f"https://api.github.com/users/ta4tsering/repos?per_page=100", headers=headers)
              data = response.json()
              for info in data:
                  repo_name = info["name"]
                  if len(repo_name) == 32:
                      new_name += nums
                      name = new_name
                  elif re.search(r"[catalog|hfml|users|ebook-template|nalanda-notes|diplomatic-kanjur]", repo_name):
                      continue
                  elif len(repo_name) <= 7 :
                      name = repo_name[1:]
                      name = int(name)
                  curr_name[name]={'repo':repo_name}
                  repo_info.update(curr_name)
                  curr_name = {}
              json_object = json.dumps(repo_info, sort_keys=True, indent=4)
              return json_object

          if __name__ == '__main__':
              token = "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"
              g = Github(token)
              pecha_id = Path.cwd().name
              opf_path = Path.cwd().resolve() / f"{pecha_id}"
              headers = {"Authorization": f"bearer {token}"}
              filename = "repo_name.json"
              repo_info = get_repo_names(headers)
              write_repo_info(repo_info, filename)
              repo_name = Path.cwd().name
              catalog_path = Path.cwd().resolve() / data
              print(catalog_path)
              get_catalog(catalog_path)
              pecha_ids = check_repo(g, filename)
              update_catalog(pecha_ids)
      shell: python